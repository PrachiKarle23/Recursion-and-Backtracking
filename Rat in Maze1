bool isSafe(vector<vector<int>> m, int x, int y, int n, vector<vector<int>> visited) {
    if (x >= 0 && x < n && y >= 0 && y < n && m[x][y] == 1 && visited[x][y] == 0) {
        return true;
    } else {
        return false;
    }
}

    void solve(vector<vector<int>> m, int n,string path,int srcx,int srcy,
    vector<vector<int>>visited,vector<string> ans)
    {
        if(srcx==n-1 && srcy==n-1){
            ans.push_back(path);
            return;
        }
        visited[srcx][srcy]=1;
        int newx=srcx+1;
        int newy=srcy;
        if(isSafe(m,newx,newy,n,visited)){
            path.push_back('D');
            solve(m,n,path,newx,newy,visited,ans);
            path.pop_back();
        }
    
        newx=srcx-1;
        newy=srcy;
        if(isSafe(m,newx,newy,n,visited)){
            path.push_back('U');
             solve(m,n,path,newx,newy,visited,ans);
            path.pop_back();
        }
        
        newx=srcx;
        newy=srcy+1;
        if(isSafe(m,newx,newy,n,visited)){
            path.push_back('R');
             solve(m,n,path,newx,newy,visited,ans);
            path.pop_back();
        }
        
        newx=srcx;
        newy=srcy-1;
        if(isSafe(m,newx,newy,n,visited)){
            path.push_back('L');
             solve(m,n,path,newx,newy,visited,ans);
            path.pop_back();
        }
        visited[srcx][srcy]=0;
    }
    vector<string> findPath(vector<vector<int>>m, int n) {
        vector<string>ans;
        if(m[0][0]==0){
            return ans;
        }
        vector<vector<int>>visited(n,vector<int>(n,0));
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<n;j++){
        //         visited[i][j]=0;
        //     }
        // }
        string path="";
        solve(m,n,path,0,0,visited,ans);
        sort(ans.begin(),ans.end());
        return ans;
    }
